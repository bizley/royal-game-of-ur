{"version":3,"sources":["actions/index.js","reducers/players.js","components/Roll.js","components/Pawn.js","components/Field.js","App.js","serviceWorker.js","reducers/current.js","reducers/roll.js","reducers/index.js","index.js"],"names":["addPawn","player","spot","type","changeState","state","removePawn","field","setInfo","info","initialState","blue","saved","inGame","moves","pawns","green","playersReducer","action","playerState","push","Object","assign","replacedPawns","forEach","pawn","from","to","reducedPawns","mapIndexes","fields","map","value","mapIndex","analyseBoard","dispatch","rollResult","players","currentPlayer","currentPlayerPawns","otherPlayerPawns","possibleMoves","length","targetField","includes","target","nextPlayer","Roll","rollValue","useSelector","roll","current","useDispatch","onClick","Math","floor","random","mapField","newRoll","className","Pawn","props","Field","gameStateForCurrent","movesForCurrent","movesFlattened","item","entryFieldId","currentPlayerPawn","content","keys","find","id","css","clickable","plusPawn","mappedIndex","save","window","confirm","toUpperCase","resetGame","opponent","movePawn","shiftPawn","abs","parseInt","substring","index","otherPlayer","App","rowSpan","Boolean","location","hostname","match","firstPlayer","currentReducer","rollReducer","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfacf2d3.chunk.js","sourcesContent":["export const ADD_PAWN = 'ADD_PAWN'\nexport const ROLL = 'ROLL'\nexport const SAVE = 'SAVE'\nexport const SWITCH_PLAYER = 'SWITCH_PLAYER'\nexport const RESET_ROLL = 'RESET_ROLL'\nexport const CHANGE_STATE = 'CHANGE_STATE'\nexport const AVAILABLE_MOVES = 'AVAILABLE_MOVES'\nexport const MOVE_PAWN = 'MOVE_PAWN'\nexport const REMOVE_PAWN = 'REMOVE_PAWN'\nexport const INFO = 'INFO'\nexport const RESET = 'RESET'\n\nexport const addPawn = (player, spot) => {\n    return {type: ADD_PAWN, player, spot}\n}\nexport const roll = value => {\n    return {type: ROLL, value}\n}\nexport const save = player => {\n    return {type: SAVE, player}\n}\nexport const switchPlayer = () => {\n    return {type: SWITCH_PLAYER}\n}\nexport const resetRoll = () => {\n    return {type: RESET_ROLL}\n}\nexport const changeState = (player, state) => {\n    return {type: CHANGE_STATE, player, state}\n}\nexport const setAvailableMoves = (player, moves) => {\n    return {type: AVAILABLE_MOVES, player, moves}\n}\nexport const movePawn = (player, from, to) => {\n    return {type: MOVE_PAWN, player, from, to}\n}\nexport const removePawn = (player, field) => {\n    return {type: REMOVE_PAWN, player, field}\n}\nexport const setInfo = (player, info) => {\n    return {type: INFO, player, info}\n}\nexport const reset = () => {\n    return {type: RESET}\n}\n","import {SAVE, ADD_PAWN, CHANGE_STATE, AVAILABLE_MOVES, MOVE_PAWN, REMOVE_PAWN, INFO, RESET} from \"../actions\";\n\nexport const AWAITS_ROLL = 'AWAITS_ROLL'\nexport const SELECTS_PAWN = 'SELECTS_PAWN'\n\nconst initialState = {\n    blue: {\n        saved: 0,\n        inGame: 7,\n        info: '',\n        state: AWAITS_ROLL,\n        moves: [],\n        pawns: []\n    },\n    green: {\n        saved: 0,\n        inGame: 7,\n        info: '',\n        state: AWAITS_ROLL,\n        moves: [],\n        pawns: []\n    }\n}\n\nconst playersReducer = (state = initialState, action) => {\n    let playerState = {};\n\n    switch (action.type) {\n        case ADD_PAWN:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].pawns.push(action.spot);\n            return Object.assign({}, state, playerState);\n\n        case SAVE:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].saved = state[action.player].saved + 1;\n            playerState[action.player].inGame = state[action.player].inGame - 1;\n            return Object.assign({}, state, playerState);\n\n        case CHANGE_STATE:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].state = action.state;\n            return Object.assign({}, state, playerState);\n\n        case AVAILABLE_MOVES:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].moves = action.moves;\n            return Object.assign({}, state, playerState);\n\n        case MOVE_PAWN:\n            playerState[action.player] = state[action.player];\n            let replacedPawns = [];\n            state[action.player].pawns.forEach(pawn => {\n                if (pawn !== action.from) {\n                    replacedPawns.push(pawn)\n                }\n            })\n            replacedPawns.push(action.to)\n            playerState[action.player].pawns = replacedPawns;\n            return Object.assign({}, state, playerState);\n\n        case REMOVE_PAWN:\n            playerState[action.player] = state[action.player];\n            let reducedPawns = [];\n            state[action.player].pawns.forEach(pawn => {\n                if (pawn !== action.field) {\n                    reducedPawns.push(pawn)\n                }\n            })\n            playerState[action.player].pawns = reducedPawns;\n            return Object.assign({}, state, playerState);\n\n        case INFO:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].info = action.info;\n            return Object.assign({}, state, playerState);\n\n        case RESET:\n            return {\n                blue: {\n                    saved: 0,\n                    inGame: 1,\n                    info: '',\n                    state: AWAITS_ROLL,\n                    moves: [],\n                    pawns: []\n                },\n                green: {\n                    saved: 0,\n                    inGame: 1,\n                    info: '',\n                    state: AWAITS_ROLL,\n                    moves: [],\n                    pawns: []\n                }\n            };\n\n        default:\n            return state;\n    }\n}\nexport default playersReducer;\n","import React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {roll, addPawn, resetRoll, changeState, setAvailableMoves, setInfo} from \"../actions\";\nimport {AWAITS_ROLL, SELECTS_PAWN} from '../reducers/players'\nimport {mapField, mapIndex, nextPlayer} from \"../App\";\n\nconst newRoll = (dispatch, players, currentPlayer) => {\n    const rollResult = Math.floor(Math.random() * 5)\n\n    dispatch(roll(rollResult))\n\n    if (rollResult === 0) {\n        dispatch(setInfo(currentPlayer, 'Losing Turn'))\n        nextPlayer(dispatch, currentPlayer)\n    } else {\n        if (players[currentPlayer].pawns.length === 0) {\n            dispatch(addPawn(currentPlayer, mapField(rollResult, currentPlayer)))\n            if (rollResult === 4) {\n                dispatch(setInfo(currentPlayer, 'Extra Turn'))\n                dispatch(resetRoll())\n            } else {\n                nextPlayer(dispatch, currentPlayer)\n            }\n        } else {\n            analyseBoard(dispatch, rollResult, players, currentPlayer)\n        }\n    }\n}\n\nconst mapIndexes = fields => fields.map(value => mapIndex(value))\n\nconst analyseBoard = (dispatch, rollResult, players, currentPlayer) => {\n    let currentPlayerPawns = mapIndexes(players[currentPlayer].pawns);\n    const otherPlayerPawns = mapIndexes(players[currentPlayer === 'blue' ? 'green' : 'blue'].pawns);\n\n    let possibleMoves = [];\n    if (players[currentPlayer].inGame > players[currentPlayer].pawns.length) {\n        currentPlayerPawns.push(0);\n    }\n\n    currentPlayerPawns.forEach(value => {\n        const targetField = value + rollResult\n        if (targetField <= 15) {\n            if (!currentPlayerPawns.includes(targetField)) {\n                if (targetField !== 8 || (targetField === 8 && !otherPlayerPawns.includes(8))) {\n                    possibleMoves.push({\n                        field: value,\n                        target: targetField\n                    })\n                }\n            }\n        }\n    })\n\n    if (possibleMoves.length === 0) {\n        dispatch(setInfo(currentPlayer, 'No Moves Available'))\n        dispatch(changeState(currentPlayer, AWAITS_ROLL))\n        nextPlayer(dispatch, currentPlayer)\n    } else {\n        dispatch(changeState(currentPlayer, SELECTS_PAWN))\n        dispatch(setAvailableMoves(currentPlayer, possibleMoves))\n    }\n}\n\nfunction Roll() {\n    const rollValue = useSelector(state => state.roll);\n    const currentPlayer = useSelector(state => state.current);\n    const players = useSelector(state => state.players);\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            {\n                rollValue === null\n                    ? <button onClick={() => newRoll(dispatch, players, currentPlayer)}>ROLL</button>\n                    : ''\n            }\n            <h1 className=\"roll\">{rollValue}</h1>\n        </div>\n    );\n}\n\nexport default Roll;\n","import React from 'react';\n\nfunction Pawn(props) {\n    return (\n        <>\n            <div className={props.player + ' pawn'}>&nbsp;</div>\n        </>\n    );\n}\n\nexport default Pawn;\n","import React from 'react';\nimport Pawn from \"./Pawn\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {SELECTS_PAWN, AWAITS_ROLL} from '../reducers/players'\nimport {addPawn, changeState, movePawn, removePawn, resetRoll, save, setInfo} from \"../actions\";\nimport {mapField, mapIndex, nextPlayer, resetGame} from \"../App\";\n\nconst shiftPawn = (dispatch, players, player, from, to) => {\n    dispatch(changeState(player, AWAITS_ROLL))\n\n    if (to === 15) {\n        dispatch(removePawn(player, from))\n        dispatch(save(player))\n        if (players[player].saved === 7) {\n            if (window.confirm(player.toUpperCase() + ' WINS!\\nWould you like to start another game?')) {\n                resetGame(dispatch, player)\n            }\n        } else {\n            dispatch(setInfo(player, 'Pawn Saved'))\n            nextPlayer(dispatch, player)\n        }\n    } else {\n        const opponent = player === 'blue' ? 'green' : 'blue';\n        const pawnsOfOpponent = players[opponent].pawns;\n        if (pawnsOfOpponent.includes(mapField(to, player))) {\n            dispatch(removePawn(opponent, mapField(to, player)))\n            dispatch(setInfo(player, 'Pawn Beaten'))\n        }\n\n        dispatch(movePawn(player, from, mapField(to, player)))\n        if ([4, 8, 13].includes(to)) {\n            dispatch(setInfo(player, 'Extra Turn'))\n            dispatch(resetRoll())\n        } else {\n            nextPlayer(dispatch, player)\n        }\n    }\n}\n\nconst plusPawn = (dispatch, player, target) => {\n    dispatch(changeState(player, AWAITS_ROLL))\n    dispatch(addPawn(player, mapField(target, player)))\n    if (target === 4) {\n        dispatch(setInfo(player, 'Extra Turn'))\n        dispatch(resetRoll())\n    } else {\n        nextPlayer(dispatch, player)\n    }\n}\n\nfunction Field(props) {\n    const dispatch = useDispatch();\n    const players = useSelector(state => state.players);\n    const currentPlayer = useSelector(state => state.current);\n    const gameStateForCurrent = players[currentPlayer].state;\n    const movesForCurrent = players[currentPlayer].moves;\n    const movesFlattened = movesForCurrent.map(item => item.field);\n    const entryFieldId = currentPlayer === 'blue' ? 'startBlue' : 'startGreen';\n\n    let currentPlayerPawn = null;\n    if (!props.content) {\n        Object.keys(players).forEach(player => {\n            if (players[player].pawns.find(item => item === props.id)) {\n                currentPlayerPawn = player;\n                return false;\n            }\n        });\n    }\n\n    let content = '';\n    let css = props.css;\n    let clickable = null;\n    let target = null;\n    if (props.content) {\n        content = props.content;\n        if (gameStateForCurrent === SELECTS_PAWN && movesFlattened.includes(0) && props.id === entryFieldId) {\n            css += ' available'\n            target = movesForCurrent.find(item => item.field === 0)\n            clickable = () => plusPawn(dispatch, currentPlayer, target.target)\n        }\n    } else if (currentPlayerPawn) {\n        content = <Pawn player={currentPlayerPawn}/>;\n        const mappedIndex = mapIndex(props.id)\n        if (\n            gameStateForCurrent === SELECTS_PAWN\n            && movesFlattened.includes(mappedIndex)\n            && props.id === mapField(mappedIndex, currentPlayer)) {\n            css += ' available'\n            target = movesForCurrent.find(item => item.field === mapIndex(props.id))\n            clickable = () => shiftPawn(dispatch, players, currentPlayer, props.id, target.target)\n        }\n    }\n\n    return (\n        <>\n            <td className={css} id={props.id} onClick={clickable}>\n                {content}\n            </td>\n        </>\n    );\n}\n\nexport default Field;\n","import React from 'react';\nimport './ur.css';\nimport Roll from \"./components/Roll\";\nimport Field from \"./components/Field\";\nimport {useSelector} from \"react-redux\";\nimport {reset, resetRoll, setInfo, switchPlayer} from \"./actions\";\n\nexport const mapIndex = field => Math.abs(parseInt(field.substring(1)));\nexport const mapField = (index, player) => {\n    if (index < 5 || index > 12) {\n        index = player === 'blue' ? index : -index\n    }\n    return 'c' + index;\n}\nexport const otherPlayer = player => player === 'blue' ? 'green' : 'blue'\nexport const nextPlayer = (dispatch, current) => {\n    dispatch(switchPlayer())\n    dispatch(setInfo(otherPlayer(current), ''))\n    dispatch(resetRoll())\n}\nexport const resetGame = (dispatch, current) => {\n    dispatch(reset())\n    dispatch(setInfo(current, ''))\n    dispatch(setInfo(otherPlayer(current), ''))\n    dispatch(resetRoll())\n}\n\nfunction App() {\n    const current = useSelector(state => state.current)\n    const players = useSelector(state => state.players)\n    return (\n        <div>\n            <table>\n                <tbody>\n                <tr>\n                    <td className={'score' + (current === 'blue' ? ' current' : '')} rowSpan=\"8\">\n                        <h1>BLUE</h1>\n                        <h2>IN GAME: {players.blue.inGame}</h2>\n                        <h2>SAVED: {players.blue.saved}</h2>\n                        {current === 'blue' ? <Roll/> : ''}\n                        <h3>{players.blue.info}</h3>\n                    </td>\n                    <Field css=\"blue extra\" id=\"c4\" />\n                    <Field id=\"c5\" />\n                    <Field css=\"green extra\" id=\"c-4\" />\n                    <td className={'score' + (current === 'green' ? ' current' : '')} rowSpan=\"8\">\n                        <h1>GREEN</h1>\n                        <h2>IN GAME: {players.green.inGame}</h2>\n                        <h2>SAVED: {players.green.saved}</h2>\n                        {current === 'green' ? <Roll/> : ''}\n                        <h3>{players.green.info}</h3>\n                    </td>\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c3\" />\n                    <Field id=\"c6\" />\n                    <Field css=\"green\" id=\"c-3\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c2\" />\n                    <Field id=\"c7\" />\n                    <Field css=\"green\" id=\"c-2\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c1\" />\n                    <Field css=\"extra\" id=\"c8\" />\n                    <Field css=\"green\" id=\"c-1\" />\n                </tr>\n                <tr>\n                    <Field css=\"empty\" content=\"&uarr;\" id=\"startBlue\" />\n                    <Field id=\"c9\" />\n                    <Field css=\"empty\" content=\"&uarr;\" id=\"startGreen\" />\n                </tr>\n                <tr>\n                    <Field css=\"empty\" />\n                    <Field id=\"c10\" />\n                    <Field css=\"empty\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c14\" />\n                    <Field id=\"c11\" />\n                    <Field css=\"green\" id=\"c-14\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue extra\" id=\"c13\" />\n                    <Field id=\"c12\" />\n                    <Field css=\"green extra\" id=\"c-13\" />\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SWITCH_PLAYER} from \"../actions\";\n\nconst firstPlayer = Math.floor(Math.random() * 2) ? 'blue' : 'green';\n\nconst currentReducer = (state = firstPlayer, action) => {\n    switch (action.type) {\n        case SWITCH_PLAYER:\n            return state === 'blue' ? 'green' : 'blue';\n        default:\n            return state;\n    }\n}\nexport default currentReducer;\n","import {ROLL, RESET_ROLL} from \"../actions\";\n\nconst rollReducer = (state = null, action) => {\n    switch (action.type) {\n        case ROLL:\n            return action.value;\n        case RESET_ROLL:\n            return null;\n        default:\n            return state;\n    }\n}\nexport default rollReducer;\n","import currentReducer from \"./current\";\nimport rollReducer from \"./roll\";\nimport playersReducer from \"./players\";\nimport {combineReducers} from \"redux\";\n\nconst allReducers = combineReducers({\n    players: playersReducer,\n    current: currentReducer,\n    roll: rollReducer\n})\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from \"react-redux\";\nimport allReducers from \"./reducers\";\n\nconst store = createStore(\n    allReducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}