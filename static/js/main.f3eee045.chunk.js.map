{"version":3,"sources":["actions/index.js","reducers/players.js","components/Roll.js","components/Pawn.js","components/Field.js","App.js","serviceWorker.js","reducers/current.js","reducers/roll.js","reducers/light.js","reducers/index.js","index.js"],"names":["addPawn","player","spot","type","changeState","state","removePawn","field","setInfo","info","lightOn","target","initialState","blue","saved","inGame","spare","moves","pawns","green","playersReducer","action","playerState","push","Object","assign","replacedPawns","forEach","pawn","from","to","reducedPawns","mapIndexes","fields","map","value","mapIndex","analyseBoard","dispatch","rollResult","players","currentPlayer","currentPlayerPawns","otherPlayerPawns","possibleMoves","length","targetField","includes","nextPlayer","Roll","rollValue","useSelector","roll","current","useDispatch","onClick","Math","floor","random","mapField","newRoll","className","Pawn","props","Field","light","gameStateForCurrent","movesForCurrent","movesFlattened","item","entryFieldId","currentPlayerPawn","content","keys","find","id","css","clickable","hoverable","plusPawn","mappedIndex","save","window","confirm","toUpperCase","resetGame","opponent","movePawn","shiftPawn","onMouseOver","onMouseOut","abs","parseInt","substring","index","otherPlayer","App","rowSpan","split","key","href","rel","Boolean","location","hostname","match","firstPlayer","currentReducer","rollReducer","lightReducer","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3eee045.chunk.js","sourcesContent":["export const ADD_PAWN = 'ADD_PAWN'\nexport const ROLL = 'ROLL'\nexport const SAVE = 'SAVE'\nexport const SWITCH_PLAYER = 'SWITCH_PLAYER'\nexport const RESET_ROLL = 'RESET_ROLL'\nexport const CHANGE_STATE = 'CHANGE_STATE'\nexport const AVAILABLE_MOVES = 'AVAILABLE_MOVES'\nexport const MOVE_PAWN = 'MOVE_PAWN'\nexport const REMOVE_PAWN = 'REMOVE_PAWN'\nexport const INFO = 'INFO'\nexport const RESET = 'RESET'\nexport const LIGHT_ON = 'LIGHT_ON'\nexport const LIGHT_OFF = 'LIGHT_OFF'\n\nexport const addPawn = (player, spot) => {\n    return {type: ADD_PAWN, player, spot}\n}\nexport const roll = value => {\n    return {type: ROLL, value}\n}\nexport const save = player => {\n    return {type: SAVE, player}\n}\nexport const switchPlayer = () => {\n    return {type: SWITCH_PLAYER}\n}\nexport const resetRoll = () => {\n    return {type: RESET_ROLL}\n}\nexport const changeState = (player, state) => {\n    return {type: CHANGE_STATE, player, state}\n}\nexport const setAvailableMoves = (player, moves) => {\n    return {type: AVAILABLE_MOVES, player, moves}\n}\nexport const movePawn = (player, from, to) => {\n    return {type: MOVE_PAWN, player, from, to}\n}\nexport const removePawn = (player, field) => {\n    return {type: REMOVE_PAWN, player, field}\n}\nexport const setInfo = (player, info) => {\n    return {type: INFO, player, info}\n}\nexport const reset = () => {\n    return {type: RESET}\n}\nexport const lightOn = (player, target) => {\n    return {type: LIGHT_ON, player, target}\n}\nexport const lightOff = () => {\n    return {type: LIGHT_OFF}\n}\n","import {SAVE, ADD_PAWN, CHANGE_STATE, AVAILABLE_MOVES, MOVE_PAWN, REMOVE_PAWN, INFO, RESET} from \"../actions\";\n\nexport const AWAITS_ROLL = 'AWAITS_ROLL'\nexport const SELECTS_PAWN = 'SELECTS_PAWN'\n\nconst initialState = {\n    blue: {\n        saved: 0,\n        inGame: 0,\n        spare: 7,\n        info: '',\n        state: AWAITS_ROLL,\n        moves: [],\n        pawns: []\n    },\n    green: {\n        saved: 0,\n        inGame: 0,\n        spare: 7,\n        info: '',\n        state: AWAITS_ROLL,\n        moves: [],\n        pawns: []\n    }\n}\n\nconst playersReducer = (state = initialState, action) => {\n    let playerState = {};\n\n    switch (action.type) {\n        case ADD_PAWN:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].pawns.push(action.spot);\n            playerState[action.player].spare = state[action.player].spare - 1;\n            playerState[action.player].inGame = state[action.player].inGame + 1;\n            return Object.assign({}, state, playerState);\n\n        case SAVE:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].saved = state[action.player].saved + 1;\n            return Object.assign({}, state, playerState);\n\n        case CHANGE_STATE:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].state = action.state;\n            return Object.assign({}, state, playerState);\n\n        case AVAILABLE_MOVES:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].moves = action.moves;\n            return Object.assign({}, state, playerState);\n\n        case MOVE_PAWN:\n            playerState[action.player] = state[action.player];\n            let replacedPawns = [];\n            state[action.player].pawns.forEach(pawn => {\n                if (pawn !== action.from) {\n                    replacedPawns.push(pawn)\n                }\n            })\n            replacedPawns.push(action.to)\n            playerState[action.player].pawns = replacedPawns;\n            return Object.assign({}, state, playerState);\n\n        case REMOVE_PAWN:\n            playerState[action.player] = state[action.player];\n            let reducedPawns = [];\n            state[action.player].pawns.forEach(pawn => {\n                if (pawn !== action.field) {\n                    reducedPawns.push(pawn)\n                }\n            })\n            playerState[action.player].pawns = reducedPawns;\n            playerState[action.player].inGame = state[action.player].inGame - 1;\n            playerState[action.player].spare = state[action.player].spare + 1;\n            return Object.assign({}, state, playerState);\n\n        case INFO:\n            playerState[action.player] = state[action.player];\n            playerState[action.player].info = action.info;\n            return Object.assign({}, state, playerState);\n\n        case RESET:\n            return {\n                blue: {\n                    saved: 0,\n                    inGame: 0,\n                    spare: 7,\n                    info: '',\n                    state: AWAITS_ROLL,\n                    moves: [],\n                    pawns: []\n                },\n                green: {\n                    saved: 0,\n                    inGame: 0,\n                    spare: 7,\n                    info: '',\n                    state: AWAITS_ROLL,\n                    moves: [],\n                    pawns: []\n                }\n            };\n\n        default:\n            return state;\n    }\n}\nexport default playersReducer;\n","import React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {roll, addPawn, resetRoll, changeState, setAvailableMoves, setInfo} from \"../actions\";\nimport {AWAITS_ROLL, SELECTS_PAWN} from '../reducers/players'\nimport {mapField, mapIndex, nextPlayer} from \"../App\";\n\nconst newRoll = (dispatch, players, currentPlayer) => {\n    const rollResult = Math.floor(Math.random() * 2)\n        + Math.floor(Math.random() * 2)\n        + Math.floor(Math.random() * 2)\n        + Math.floor(Math.random() * 2);\n\n    dispatch(roll(rollResult))\n\n    if (rollResult === 0) {\n        dispatch(setInfo(currentPlayer, 'Rolled 0|Losing Turn'))\n        nextPlayer(dispatch, currentPlayer)\n    } else {\n        if (players[currentPlayer].pawns.length === 0) {\n            dispatch(addPawn(currentPlayer, mapField(rollResult, currentPlayer)))\n            if (rollResult === 4) {\n                dispatch(setInfo(currentPlayer, 'Special Field|Extra Turn'))\n                dispatch(resetRoll())\n            } else {\n                nextPlayer(dispatch, currentPlayer)\n            }\n        } else {\n            analyseBoard(dispatch, rollResult, players, currentPlayer)\n        }\n    }\n}\n\nconst mapIndexes = fields => fields.map(value => mapIndex(value))\n\nconst analyseBoard = (dispatch, rollResult, players, currentPlayer) => {\n    let currentPlayerPawns = mapIndexes(players[currentPlayer].pawns);\n    const otherPlayerPawns = mapIndexes(players[currentPlayer === 'blue' ? 'green' : 'blue'].pawns);\n\n    let possibleMoves = [];\n    if (players[currentPlayer].spare > players[currentPlayer].pawns.length) {\n        currentPlayerPawns.push(0);\n    }\n\n    currentPlayerPawns.forEach(value => {\n        const targetField = value + rollResult\n        if (targetField <= 15) {\n            if (!currentPlayerPawns.includes(targetField)) {\n                if (targetField !== 8 || (targetField === 8 && !otherPlayerPawns.includes(8))) {\n                    possibleMoves.push({\n                        field: value,\n                        target: targetField\n                    })\n                }\n            }\n        }\n    })\n\n    if (possibleMoves.length === 0) {\n        dispatch(setInfo(currentPlayer, 'No Moves Available'))\n        dispatch(changeState(currentPlayer, AWAITS_ROLL))\n        nextPlayer(dispatch, currentPlayer)\n    } else {\n        dispatch(changeState(currentPlayer, SELECTS_PAWN))\n        dispatch(setAvailableMoves(currentPlayer, possibleMoves))\n    }\n}\n\nfunction Roll() {\n    const rollValue = useSelector(state => state.roll);\n    const currentPlayer = useSelector(state => state.current);\n    const players = useSelector(state => state.players);\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            {\n                rollValue === null\n                    ? <button onClick={() => newRoll(dispatch, players, currentPlayer)}>ROLL</button>\n                    : ''\n            }\n            <h1 className=\"roll\">{rollValue}</h1>\n        </div>\n    );\n}\n\nexport default Roll;\n","import React from 'react';\n\nfunction Pawn(props) {\n    return (\n        <>\n            <div className={props.player + ' pawn'}>&nbsp;</div>\n        </>\n    );\n}\n\nexport default Pawn;\n","import React from 'react';\nimport Pawn from \"./Pawn\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {SELECTS_PAWN, AWAITS_ROLL} from '../reducers/players'\nimport {addPawn, changeState, movePawn, removePawn, resetRoll, save, setInfo, lightOn, lightOff} from \"../actions\";\nimport {mapField, mapIndex, nextPlayer, resetGame} from \"../App\";\n\nconst shiftPawn = (dispatch, players, player, from, to) => {\n    dispatch(changeState(player, AWAITS_ROLL))\n\n    if (to === 15) {\n        dispatch(removePawn(player, from))\n        dispatch(save(player))\n        if (players[player].saved === 7) {\n            if (window.confirm(player.toUpperCase() + ' WINS!\\nWould you like to start another game?')) {\n                resetGame(dispatch, player)\n            }\n        } else {\n            dispatch(setInfo(player, 'Pawn Saved'))\n            nextPlayer(dispatch, player)\n        }\n    } else {\n        const opponent = player === 'blue' ? 'green' : 'blue';\n        const pawnsOfOpponent = players[opponent].pawns;\n        if (pawnsOfOpponent.includes(mapField(to, player))) {\n            dispatch(removePawn(opponent, mapField(to, player)))\n            dispatch(setInfo(player, 'Pawn Beaten'))\n        }\n\n        dispatch(movePawn(player, from, mapField(to, player)))\n        if ([4, 8, 13].includes(to)) {\n            dispatch(setInfo(player, 'Special Field|Extra Turn'))\n            dispatch(resetRoll())\n        } else {\n            nextPlayer(dispatch, player)\n        }\n    }\n}\n\nconst plusPawn = (dispatch, player, target) => {\n    dispatch(changeState(player, AWAITS_ROLL))\n    dispatch(addPawn(player, mapField(target, player)))\n    if (target === 4) {\n        dispatch(setInfo(player, 'Special Field|Extra Turn'))\n        dispatch(resetRoll())\n    } else {\n        nextPlayer(dispatch, player)\n    }\n}\n\nfunction Field(props) {\n    const dispatch = useDispatch();\n    const players = useSelector(state => state.players);\n    const currentPlayer = useSelector(state => state.current);\n    const light = useSelector(state => state.light);\n    const gameStateForCurrent = players[currentPlayer].state;\n    const movesForCurrent = players[currentPlayer].moves;\n    const movesFlattened = movesForCurrent.map(item => item.field);\n    const entryFieldId = currentPlayer === 'blue' ? 'startBlue' : 'startGreen';\n\n    let currentPlayerPawn = null;\n    if (!props.content) {\n        Object.keys(players).forEach(player => {\n            if (players[player].pawns.find(item => item === props.id)) {\n                currentPlayerPawn = player;\n                return false;\n            }\n        });\n    }\n\n    let content = '';\n    let css = props.css;\n    let clickable = null;\n    let hoverable = null;\n    let target = null;\n    if (props.content) {\n        content = props.content;\n        if (gameStateForCurrent === SELECTS_PAWN && movesFlattened.includes(0) && props.id === entryFieldId) {\n            css += ' available'\n            target = movesForCurrent.find(item => item.field === 0)\n            clickable = () => plusPawn(dispatch, currentPlayer, target.target)\n            hoverable = () => dispatch(lightOn(currentPlayer, target.target))\n        }\n    } else if (currentPlayerPawn) {\n        content = <Pawn player={currentPlayerPawn}/>;\n        const mappedIndex = mapIndex(props.id)\n        if (\n            gameStateForCurrent === SELECTS_PAWN\n            && movesFlattened.includes(mappedIndex)\n            && props.id === mapField(mappedIndex, currentPlayer)\n        ) {\n            css += ' available'\n            target = movesForCurrent.find(item => item.field === mapIndex(props.id))\n            clickable = () => shiftPawn(dispatch, players, currentPlayer, props.id, target.target)\n            hoverable = () => dispatch(lightOn(currentPlayer, target.target))\n        }\n        if (light && mapField(light.target, light.player) === props.id && currentPlayerPawn !== currentPlayer) {\n            css += ' conflict';\n        }\n    } else if (light && mapField(light.target, light.player) === props.id) {\n        css += ' target';\n    }\n\n    return (\n        <>\n            <td\n                className={css}\n                id={props.id}\n                onClick={clickable}\n                onMouseOver={hoverable}\n                onMouseOut={() => dispatch(lightOff())}>\n                {content}\n            </td>\n        </>\n    );\n}\n\nexport default Field;\n","import React, {Fragment} from 'react';\nimport './ur.css';\nimport Roll from \"./components/Roll\";\nimport Field from \"./components/Field\";\nimport {useSelector} from \"react-redux\";\nimport {reset, resetRoll, setInfo, switchPlayer} from \"./actions\";\n\nexport const mapIndex = field => Math.abs(parseInt(field.substring(1)));\nexport const mapField = (index, player) => {\n    if (index < 5 || index > 12) {\n        index = player === 'blue' ? index : -index\n    }\n    return 'c' + index;\n}\nexport const otherPlayer = player => player === 'blue' ? 'green' : 'blue'\nexport const nextPlayer = (dispatch, current) => {\n    dispatch(switchPlayer())\n    dispatch(setInfo(otherPlayer(current), ''))\n    dispatch(resetRoll())\n}\nexport const resetGame = (dispatch, current) => {\n    dispatch(reset())\n    dispatch(setInfo(current, ''))\n    dispatch(setInfo(otherPlayer(current), ''))\n    dispatch(resetRoll())\n}\n\nfunction App() {\n    const current = useSelector(state => state.current)\n    const players = useSelector(state => state.players)\n    return (\n        <div>\n            <table>\n                <tbody>\n                <tr>\n                    <td className={'score' + (current === 'blue' ? ' current' : '')} rowSpan=\"8\">\n                        <h1>BLUE</h1>\n                        <h2>SPARE: {players.blue.spare}</h2>\n                        <h2>IN GAME: {players.blue.inGame}</h2>\n                        <h2>SAVED: {players.blue.saved}</h2>\n                        {current === 'blue' ? <Roll/> : ''}\n                        <h3>{players.blue.info.split('|').map((item, key) => {\n                            return <Fragment key={key}>{item}<br/></Fragment>\n                        })}</h3>\n                    </td>\n                    <Field css=\"blue extra\" id=\"c4\" />\n                    <Field id=\"c5\" />\n                    <Field css=\"green extra\" id=\"c-4\" />\n                    <td className={'score' + (current === 'green' ? ' current' : '')} rowSpan=\"8\">\n                        <h1>GREEN</h1>\n                        <h2>SPARE: {players.green.spare}</h2>\n                        <h2>IN GAME: {players.green.inGame}</h2>\n                        <h2>SAVED: {players.green.saved}</h2>\n                        {current === 'green' ? <Roll/> : ''}\n                        <h3>{players.green.info.split('|').map((item, key) => {\n                            return <Fragment key={key}>{item}<br/></Fragment>\n                        })}</h3>\n                    </td>\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c3\" />\n                    <Field id=\"c6\" />\n                    <Field css=\"green\" id=\"c-3\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c2\" />\n                    <Field id=\"c7\" />\n                    <Field css=\"green\" id=\"c-2\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c1\" />\n                    <Field css=\"extra\" id=\"c8\" />\n                    <Field css=\"green\" id=\"c-1\" />\n                </tr>\n                <tr>\n                    <Field css=\"empty\" content=\"&uarr;\" id=\"startBlue\" />\n                    <Field id=\"c9\" />\n                    <Field css=\"empty\" content=\"&uarr;\" id=\"startGreen\" />\n                </tr>\n                <tr>\n                    <Field css=\"empty\" id=\"c15\" />\n                    <Field id=\"c10\" />\n                    <Field css=\"empty\" id=\"c-15\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue\" id=\"c14\" />\n                    <Field id=\"c11\" />\n                    <Field css=\"green\" id=\"c-14\" />\n                </tr>\n                <tr>\n                    <Field css=\"blue extra\" id=\"c13\" />\n                    <Field id=\"c12\" />\n                    <Field css=\"green extra\" id=\"c-13\" />\n                </tr>\n                </tbody>\n            </table>\n            <a href=\"https://en.wikipedia.org/wiki/Royal_Game_of_Ur\" target=\"_blank\" rel=\"noopener noreferrer\">Royal Game of Ur at Wiki</a>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SWITCH_PLAYER} from \"../actions\";\n\nconst firstPlayer = Math.floor(Math.random() * 2) ? 'blue' : 'green';\n\nconst currentReducer = (state = firstPlayer, action) => {\n    switch (action.type) {\n        case SWITCH_PLAYER:\n            return state === 'blue' ? 'green' : 'blue';\n        default:\n            return state;\n    }\n}\nexport default currentReducer;\n","import {ROLL, RESET_ROLL} from \"../actions\";\n\nconst rollReducer = (state = null, action) => {\n    switch (action.type) {\n        case ROLL:\n            return action.value;\n        case RESET_ROLL:\n            return null;\n        default:\n            return state;\n    }\n}\nexport default rollReducer;\n","import {LIGHT_ON, LIGHT_OFF} from \"../actions\";\n\nconst lightReducer = (state = null, action) => {\n    switch (action.type) {\n        case LIGHT_ON:\n            return {\n                player: action.player,\n                target: action.target\n            };\n        case LIGHT_OFF:\n            return null;\n        default:\n            return state;\n    }\n}\nexport default lightReducer;\n","import currentReducer from \"./current\";\nimport rollReducer from \"./roll\";\nimport playersReducer from \"./players\";\nimport {combineReducers} from \"redux\";\nimport lightReducer from \"./light\";\n\nconst allReducers = combineReducers({\n    players: playersReducer,\n    current: currentReducer,\n    roll: rollReducer,\n    light: lightReducer\n})\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from \"react-redux\";\nimport allReducers from \"./reducers\";\n\nconst store = createStore(allReducers)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}